# buildbot/buildbot-worker for OpenXT 32bit builds

# please follow docker best practices
# https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/

FROM multiarch/debian-debootstrap:i386-jessie
MAINTAINER Daniel P. Smith <dpsmith@apertussolutions.com>

# Last build date - this can be updated whenever there are security updates so
# that everything is rebuilt
ENV     security_updates_as_of 2018-06-15

# This will make apt-get install without question
ARG     DEBIAN_FRONTEND=noninteractive


RUN     sed -i "s/httpredir.debian.org/ftp.us.debian.org/" /etc/apt/sources.list

# Install security updates and required packages
RUN     apt-get update && \
        apt-get -y upgrade

RUN     apt-get -y install -q \
        # buildbot requirements
        build-essential git subversion python3-dev libffi-dev
        libssl-dev python3-setuptools curl \
        # OpenXT/OE requirements
        openssl sed wget cvs coreutils unzip texi2html texinfo docbook-utils \
        gawk python-pysqlite2 diffstat help2man make gcc g++ desktop-file-utils \
        chrpath cpio iputils-ping guilt iasl quilt bin86 bcc libsdl1.2-dev \
        liburi-perl genisoimage policycoreutils unzip rpm libncurses5-dev \
        libc6-dev-amd64 libelf-dev xorriso mtools dosfstools file locales
        # Cleanup deb install
        rm -rf /var/lib/apt/lists/* && \
        echo "dash dash/sh boolean false" | debconf-set-selections && \
        DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

# Test runs produce a great quantity of dead grandchild processes.  In a
# non-docker environment, these are automatically reaped by init (process 1),
# so we need to simulate that here.  See https://github.com/Yelp/dumb-init
RUN     curl https://github.com/Yelp/dumb-init/releases/download/v1.2.1/dumb-init_1.2.1_amd64.deb -Lo /tmp/init.deb && \
        dpkg -i /tmp/init.deb

# ubuntu pip version has issues so we should use the official upstream version
# it: https://github.com/pypa/pip/pull/3287
RUN     easy_install3 pip && \
        # Install required python packages, and twisted
        pip --no-cache-dir install 'twisted[tls]' && \

# Download the GHC prerequisites from squeeze
RUN     mkdir -p /tmp/ghc-prereq && cd /tmp/ghc-prereq && \
        wget http://archive.debian.org/debian/pool/main/g/gmp/libgmpxx4ldbl_4.3.2+dfsg-1_i386.deb && \
        wget http://archive.debian.org/debian/pool/main/g/gmp/libgmp3c2_4.3.2+dfsg-1_i386.deb && \
        wget http://archive.debian.org/debian/pool/main/g/gmp/libgmp3-dev_4.3.2+dfsg-1_i386.deb && \
        dpkg -i libgmpxx4ldbl_4.3.2+dfsg-1_i386.deb libgmp3c2_4.3.2+dfsg-1_i386.deb \
          libgmp3-dev_4.3.2+dfsg-1_i386.deb && \
        rm -rf /tmp/ghc-prereq

# Install the required version of GHC
RUN     cd /tmp && \
        wget http://www.haskell.org/ghc/dist/6.12.3/ghc-6.12.3-i386-unknown-linux-n.tar.bz2 && \
        tar jxf ghc-6.12.3-i386-unknown-linux-n.tar.bz2 && \
        rm ghc-6.12.3-i386-unknown-linux-n.tar.bz2 && \
        cd ghc-6.12.3 && \
        ./configure --prefix=/usr && \
        make install && \
        cd /tmp && rm -rf ghc-6.12.3


# Setup buildbot worker
RUN     mkdir /buildbot &&\
        useradd -ms /bin/bash buildbot

COPY . /usr/src/buildbot-worker
COPY docker/buildbot.tac /buildbot/buildbot.tac

RUN     pip3 install /usr/src/buildbot-worker && \
        chown -R buildbot /buildbot

USER buildbot
WORKDIR /buildbot

CMD ["/usr/bin/dumb-init", "twistd", "--pidfile=", "-ny", "buildbot.tac"]
